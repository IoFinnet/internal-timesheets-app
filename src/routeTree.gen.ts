/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SetUpRouteImport } from './routes/set-up'
import { Route as _readyRouteImport } from './routes/__ready'
import { Route as _readyIndexRouteImport } from './routes/__ready.index'
import { Route as _readySettingsRouteImport } from './routes/__ready.settings'

const SetUpRoute = SetUpRouteImport.update({
  id: '/set-up',
  path: '/set-up',
  getParentRoute: () => rootRouteImport,
} as any)
const _readyRoute = _readyRouteImport.update({
  id: '/__ready',
  getParentRoute: () => rootRouteImport,
} as any)
const _readyIndexRoute = _readyIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => _readyRoute,
} as any)
const _readySettingsRoute = _readySettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => _readyRoute,
} as any)

export interface FileRoutesByFullPath {
  '/set-up': typeof SetUpRoute
  '/settings': typeof _readySettingsRoute
  '/': typeof _readyIndexRoute
}
export interface FileRoutesByTo {
  '/set-up': typeof SetUpRoute
  '/settings': typeof _readySettingsRoute
  '/': typeof _readyIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/__ready': typeof _readyRouteWithChildren
  '/set-up': typeof SetUpRoute
  '/__ready/settings': typeof _readySettingsRoute
  '/__ready/': typeof _readyIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/set-up' | '/settings' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/set-up' | '/settings' | '/'
  id: '__root__' | '/__ready' | '/set-up' | '/__ready/settings' | '/__ready/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  _readyRoute: typeof _readyRouteWithChildren
  SetUpRoute: typeof SetUpRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/set-up': {
      id: '/set-up'
      path: '/set-up'
      fullPath: '/set-up'
      preLoaderRoute: typeof SetUpRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__ready': {
      id: '/__ready'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof _readyRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/__ready/': {
      id: '/__ready/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof _readyIndexRouteImport
      parentRoute: typeof _readyRoute
    }
    '/__ready/settings': {
      id: '/__ready/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof _readySettingsRouteImport
      parentRoute: typeof _readyRoute
    }
  }
}

interface _readyRouteChildren {
  _readySettingsRoute: typeof _readySettingsRoute
  _readyIndexRoute: typeof _readyIndexRoute
}

const _readyRouteChildren: _readyRouteChildren = {
  _readySettingsRoute: _readySettingsRoute,
  _readyIndexRoute: _readyIndexRoute,
}

const _readyRouteWithChildren =
  _readyRoute._addFileChildren(_readyRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  _readyRoute: _readyRouteWithChildren,
  SetUpRoute: SetUpRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
