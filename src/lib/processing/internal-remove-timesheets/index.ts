import { eq } from "drizzle-orm";
import { DateTime } from "luxon";

import { BambooHr } from "~/lib/bamboohr";
import { db, dbSchema } from "~/lib/db";
import { createLogger } from "~/lib/logger";

const __logger = createLogger({ name: "processing:remove-generated-timesheets" });

export async function internal__removeTimesheets({
  signal,
  dates,
  includeNonGeneratedOnes,
}: {
  signal?: AbortSignal | null | undefined;
  dates: string[];
  includeNonGeneratedOnes?: boolean | null | undefined;
}) {
  const logger = __logger.child({});
  signal?.throwIfAborted();

  const all = await Promise.allSettled(
    dates.map(async (date) => {
      await removeTimesheetsForDay({ signal, date, includeNonGeneratedOnes });
    }),
  );

  const rejected = all.find((it) => it.status === "rejected");
  if (rejected) {
    throw rejected.reason instanceof Error ? rejected.reason : new Error(String(rejected.reason));
  }

  logger.debug("internal__removeTimesheets() done");
}

async function removeTimesheetsForDay({
  signal,
  date,
  includeNonGeneratedOnes,
}: {
  signal?: AbortSignal | null | undefined;
  date: string;
  includeNonGeneratedOnes?: boolean | null | undefined;
}) {
  const logger = __logger.child({ date });
  try {
    const start = DateTime.fromISO(date).startOf("day");
    const end = DateTime.fromISO(date).endOf("day");

    const toDelete: number[] = [];

    // delete generated timesheets
    const timesheetEntries = await BambooHr.Api.getTimesheetEntries({ end, start });
    signal?.throwIfAborted();
    for (const entry of timesheetEntries) {
      if (includeNonGeneratedOnes || entry.note?.includes("Generated by io.timesheets")) {
        toDelete.push(entry.id);
      }
    }

    if (toDelete.length > 0) {
      await BambooHr.Api.deleteTimesheetEntries({ entryIds: toDelete });

      const timesheetEntriesAgain = await BambooHr.Api.getTimesheetEntries({ end, start });
      if (timesheetEntriesAgain.length === 0) {
        await db.delete(dbSchema.timesheetsDone).where(eq(dbSchema.timesheetsDone.date, date));
      }
    } else {
      await db.delete(dbSchema.timesheetsDone).where(eq(dbSchema.timesheetsDone.date, date));
    }
  } catch (error) {
    logger.error({ error }, "failed to delete timesheets for day");
  }
}
