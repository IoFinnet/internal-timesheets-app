name: CD
on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

permissions:
  contents: write
  pull-requests: write

jobs:
  changesets:
    name: Test and publish changesets
    runs-on: ubuntu-latest
    outputs:
      hasChangesets: ${{ steps.changesets.outputs.hasChangesets }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri

      - run: npm ci
      - run: npm run lint
      - run: npm run knip

      - uses: changesets/action@v1
        id: changesets
        with:
          publish: npm run release
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE_AND_NPM_REGISTRY }}

  macos:
    name: Build and sign macOS app
    needs: changesets
    if: needs.changesets.outputs.hasChangesets == 'false'
    environment: production
    runs-on: macos-latest

    env:
      APPLE_API_KEY_PATH: ~/.private_keys/AuthKey_${{ vars.APPLE_API_KEY_ID }}.p8

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: "npm"

      - uses: Swatinem/rust-cache@v2
        with:
          workspaces: |
            src-tauri

      - run: npm ci
      - run: |
          VERSION=$(jq -r '.version' package.json)
          echo "VERSION=$VERSION" >> $GITHUB_ENV

          CHANGELOG=$(sed -n "/^## ${VERSION}$/,/^## /p" CHANGELOG.md | sed '1d;$d')
          {
            echo "CHANGELOG<<EOF"
            echo "$CHANGELOG"
            echo "EOF"
          } >> $GITHUB_ENV

      - name: Import Apple Certificates
        run: |
          echo "Importing API key…"
          mkdir -p ~/.private_keys
          echo "${{ secrets.APPLE_API_KEY_BASE64 }}" | base64 --decode > ${{ env.APPLE_API_KEY_PATH }}

          echo "Creating local keychain…"
          security create-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain

          echo "Importing code signing certificate…"
          echo "${{ secrets.CSC_BASE64 }}" | base64 --decode > ${{ runner.temp }}/certificate.p12
          security import ${{ runner.temp }}/certificate.p12 -k build.keychain -P "${{ secrets.CSC_KEY_PASSWORD }}" -T /usr/bin/codesign

          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" build.keychain
        env:
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}

      - name: Verify Certificate
        run: |
          CERT_INFO=$(security find-identity -v -p codesigning build.keychain | grep "${{ vars.APPLE_SIGNING_IDENTITY }}")
          CERT_ID=$(echo "$CERT_INFO" | awk -F'"' '{print $2}')
          echo "CERT_ID=$CERT_ID" >> $GITHUB_ENV
          echo "Code signing certificate imported."

      - uses: tauri-apps/tauri-action@v0
        env:
          VITE_GOOGLE_CLIENT_ID: ${{ secrets.VITE_GOOGLE_CLIENT_ID }}
          VITE_GOOGLE_CLIENT_SECRET: ${{ secrets.VITE_GOOGLE_CLIENT_SECRET }}

          GITHUB_TOKEN: ${{ secrets.GH_TOKEN_SEMANTIC_RELEASE_AND_NPM_REGISTRY }}
          APPLE_SIGNING_IDENTITY: ${{ vars.APPLE_SIGNING_IDENTITY }}
          APPLE_API_KEY: ${{ vars.APPLE_API_KEY_ID }}
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY_PATH: ${{ env.APPLE_API_KEY_PATH }}
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
        with:
          args: --target aarch64-apple-darwin --bundles app
          tagName: v__VERSION__
          releaseName: __VERSION__
          releaseBody: "${{ env.CHANGELOG }}"
